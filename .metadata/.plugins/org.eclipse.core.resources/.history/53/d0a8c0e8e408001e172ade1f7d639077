package stepDefination;

import java.util.ResourceBundle;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Assert;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.*;
import io.github.bonigarcia.wdm.WebDriverManager;
import pageObjects.HomePage;
import pageObjects.MyAccountPage;
import pageObjects.RegistrationpPage;

public class Steps {
	
	public WebDriver driver;
    HomePage hp;
    RegistrationpPage rp;
    MyAccountPage macc;

    public Logger log; //for logging
    public ResourceBundle rb; // for reading properties file
    public String br; //to store browser name
    
	@Before
	public void setUp()
	{
		 //for logging
        log= LogManager.getLogger(this.getClass());
        //Reading config.properties (for browser)
        rb=ResourceBundle.getBundle("config");
        br=rb.getString("browser");
	}

	@After
	public void tearDown(Scenario scenario)
	{
		System.out.println("Scenario status ======>"+scenario.getStatus());
        if(scenario.isFailed()) {
             byte[] screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
            scenario.attach(screenshot, "image/png",scenario.getName());
            }
		driver.quit();
	}
	
	                               // *** Implement Registration Feature ***
	
	@Given("user open the browser")
	public void user_open_the_browser() 
	{
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		WebDriverManager.chromedriver().setup();
		//driver=new ChromeDriver(options);
		if(br.equals("chrome"))
	        {
	           driver=new ChromeDriver(options);
	        }
	        else if (br.equals("firefox")) {
	            driver = new FirefoxDriver();
	        }
	        else if (br.equals("edge")) {
	            driver = new EdgeDriver();
	        }
	}

	@Given("open the url {string}")
	public void open_the_url(String url) 
	{
		driver.get(url);
        driver.manage().window().maximize();
	}

	@When("user navigate to Homepage")
	public void user_navigate_to_homepage() 
	{
		hp = new HomePage(driver);
		hp.myAccountLink();
		log.info("click on my account");
	}

	@When("click on register")
	public void click_on_register() 
	{
		hp.registerLink();
		log.info("click on registerLink");
	}

	@When("user enter firstname as {string}")
	public void user_enter_firstname_as(String fname) throws InterruptedException 
	{
		Thread.sleep(500);
		rp = new RegistrationpPage(driver);
		rp.firstName(fname);
	}

	@When("user enter lastname as {string}")
	public void user_enter_lastname_as(String lname) 
	{
		rp.lastName(lname);
	}

	@When("user enter email as {string}")
	public void user_enter_email_as(String email) 
	{
		rp.emailId(email);
	}

	@When("user enter telephone as {string}")
	public void user_enter_telephone_as(String telephone) 
	{
		rp.telePhone(telephone);
	}

	@When("user enter password as {string}")
	public void user_enter_password_as(String password) 
	{
		rp.password(password);
	}

	@When("user enter confirm password as {string}")
	public void user_enter_confirm_password_as(String cnfPassword) 
	{
		rp.cnfPassword(cnfPassword);
	}

	@When("user click the subscribe buttn yes")
	public void user_click_the_subscribe_buttn_yes() 
	{
		rp.newsletterYes();
		log.info("click on newsletters Yes");
	}

	@When("user click the privacy policy")
	public void user_click_the_privacy_policy() 
	{
		rp.agreeButton();
		log.info("click on agree");
	}

	@When("user click the continue button")
	public void user_click_the_continue_button() 
	{
		rp.continueButton();
		log.info("click on continue");
	}


	@Then("validate the success message")
	public void validate_the_success_message() throws InterruptedException 
	{
		Thread.sleep(1000);
		String act_Message=rp.successMsg();
		String exp_Message="Your Account Has Been Created!";
		if(act_Message.equalsIgnoreCase(exp_Message))
		{
			log.info("Expected message is equal to actual message");
            Assert.assertTrue(true);
		}
		else
		{
			log.info("Expected message is not equal to actual message");
            Assert.assertTrue(false);
		}
		
	}

	@Then("click on continue")
	public void click_on_continue() 
	{
		rp.successCntBtn();
		log.info("click on continue");

	}

	@Then("validate the My Account page")
	public void validate_the_my_account_page() throws InterruptedException 
	{
		Thread.sleep(1000);
	    macc = new MyAccountPage(driver);
	    String act_msg=macc.myAccPageTitle();
	    String exp_msg="My Account";
	    if(act_msg.equalsIgnoreCase(exp_msg))
	    {
	    	log.info("Expected message is equal to actual message");
            Assert.assertTrue(true);
	    }
	    else
	    {
	    	log.info("Expected message is not equal to actual message");
            Assert.assertTrue(false);
	    }
	}
	
	
	                                         // *** Implement Login Feature with DDT ***
    
	
}
